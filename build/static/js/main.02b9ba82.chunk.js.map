{"version":3,"sources":["components/Header/index.js","components/MovieItem/index.js","components/Popular/index.js","components/TopRated/index.js","components/Upcoming/index.js","components/SearchResults/index.js","components/CastItem/index.js","components/MovieDetails/index.js","App.js","index.js"],"names":["Header","_useState","useState","_useState2","_slicedToArray","searchInput","setSearchInput","history","useHistory","_jsx","_Fragment","children","_jsxs","className","Link","to","type","placeholder","value","onChange","e","target","onClick","trim","push","concat","MovieItem","props","data","id","title","posterPath","rating","imageUrl","src","alt","toFixed","apiStatusConstants","Popular","apiStatus","setApiStatus","_useState3","results","totalPages","_useState4","popularMovieData","setPopularMovieData","_useState5","_useState6","page","setPage","useEffect","getPopularMovieData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","getPopularMoviesURL","response","wrap","_context","prev","next","fetch","sent","json","ok","map","each","poster_path","backdropPath","backdrop_path","vote_average","total_pages","stop","apply","arguments","Loader","color","height","width","eachMovie","TopRated","topRatedMovieData","setTopRatedMovieData","getTopRatedMovieData","apiUrl","Upcoming","upcomingMovieData","setUpcomingMovieData","getUpcomingMovieData","SearchResults","match","params","searchedMovieData","setSearchedMovieData","getSearchedMovieData","CastItem","name","profilePath","characterName","MovieDetails","movieData","setMovieData","castDetails","setCastDetails","getMovieData","duration","runtime","genres","releaseDate","release_date","overview","getMovieCastData","_ref2","_callee2","_context2","cast","profile_path","character","movieReleasedYear","String","Date","getFullYear","getMovieReleasedMonth","getMonth","movieReleasedMonth","getMovieReleasedDate","getDate","movieReleasedDate","movieGenres","undefined","join","movieRating","Math","floor","parseInt","App","Switch","Route","exact","path","component","ReactDOM","render","React","StrictMode","BrowserRouter","document","getElementById"],"mappings":"0VAgEeA,EA3DA,WACb,IAAAC,EAAsCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAC5BI,EAAUC,cAahB,OACEC,cAAAC,WAAA,CAAAC,SACEC,eAAA,OAAKC,UAAU,UAASF,SAAA,CACtBF,cAACK,IAAI,CAACC,GAAG,IAAIF,UAAU,YAAWF,SAChCF,cAAA,MAAII,UAAU,QAAOF,SAAC,cAExBC,eAAA,MAAIC,UAAU,YAAWF,SAAA,CACvBF,cAAA,MAAAE,SACEF,cAACK,IAAI,CAACC,GAAG,IAAIF,UAAU,YAAWF,SAChCF,cAAA,MAAII,UAAU,cAAaF,SAAC,gBAGhCF,cAAA,MAAAE,SACEF,cAACK,IAAI,CAACC,GAAG,aAAaF,UAAU,YAAWF,SACzCF,cAAA,MAAII,UAAU,cAAaF,SAAC,kBAGhCF,cAAA,MAAAE,SACEF,cAACK,IAAI,CAACC,GAAG,YAAYF,UAAU,YAAWF,SACxCF,cAAA,MAAII,UAAU,cAAaF,SAAC,oBAIlCC,eAAA,OAAKC,UAAU,mBAAkBF,SAAA,CAC/BF,cAAA,SACEO,KAAK,SACLH,UAAU,aACVI,YAAY,SACZC,MAAOb,EACPc,SAxCkB,SAAAC,GAC1Bd,EAAec,EAAEC,OAAOH,MAC1B,IAwCQT,cAAA,UACEO,KAAK,SACLM,QAxCgB,WACG,KAAvBjB,EAAYkB,SACdhB,EAAQiB,KAAK,WAADC,OAAYpB,IACxBC,EAAe,IAEnB,EAoCUO,UAAU,aAAYF,SACvB,kBAOX,EClCee,G,MAxBG,SAAAC,GAChB,IAAOC,EAAQD,EAARC,KACAC,EAAiCD,EAAjCC,GAAIC,EAA6BF,EAA7BE,MAAOC,EAAsBH,EAAtBG,WAAYC,EAAUJ,EAAVI,OAExBC,EAAQ,kCAAAR,OAAqCM,GAEnD,OACEnB,eAAA,OAAKC,UAAU,aAAYF,SAAA,CACzBF,cAAA,OAAKyB,IAAKD,EAAUE,IAAKL,EAAOjB,UAAU,WAC1CD,eAAA,OAAKC,UAAU,UAASF,SAAA,CACtBF,cAAA,MAAII,UAAU,aAAYF,SAAEmB,IAC5BlB,eAAA,OAAKC,UAAU,uBAAsBF,SAAA,CACnCC,eAAA,KAAGC,UAAU,SAAQF,SAAA,CAAC,UAAGqB,EAAOI,QAAQ,MACxC3B,cAACK,IAAI,CAACC,GAAE,UAAAU,OAAYI,GAAKlB,SACvBF,cAAA,UAAQI,UAAU,WAAWG,KAAK,SAAQL,SAAC,2BAQvD,GCjBM0B,G,MACK,WADLA,EAEK,UA4EIC,EAzEC,WACd,IAAArC,EAAkCC,mBAASmC,GAA2BlC,EAAAC,YAAAH,EAAA,GAA/DsC,EAASpC,EAAA,GAAEqC,EAAYrC,EAAA,GAC9BsC,EAAgDvC,mBAAS,CACvDwC,QAAS,GACTC,WAAY,IACZC,EAAAxC,YAAAqC,EAAA,GAHKI,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAI5CG,EAAwB7C,mBAAS,GAAE8C,EAAA5C,YAAA2C,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,qBAAU,WACR,IAAMC,EAAmB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA/B,EAAAc,EAAAC,EAAA,OAAAY,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE0F,MADrG,mCACTL,EAAmB,sDAAAjC,OADV,mCACyE,yBAAAA,OAAwBwB,GAAIY,EAAAE,KAAA,EAC7FC,MAAMN,GAAoB,OAAnC,OAARC,EAAQE,EAAAI,KAAAJ,EAAAE,KAAA,EACKJ,EAASO,OAAM,OAA5BtC,EAAIiC,EAAAI,KACNN,EAASQ,KACLzB,EAAUd,EAAKc,QAAQ0B,KAAI,SAAAC,GAAI,MAAK,CACxCxC,GAAIwC,EAAKxC,GACTC,MAAOuC,EAAKvC,MACZC,WAAYsC,EAAKC,YACjBC,aAAcF,EAAKG,cACnBxC,OAAQqC,EAAKI,aACd,IACK9B,EAAaf,EAAK8C,YACxB5B,EAAoB,CAACJ,UAASC,eAC9BH,EAAaH,IACd,wBAAAwB,EAAAc,OAAA,GAAAlB,EAAA,KACF,kBAjBwB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAmBzBzB,GACF,GAAG,CAACH,IAcJ,OACErC,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAACT,EAAM,IACNuC,IAAcF,GACb5B,cAAA,OAAKI,UAAU,SAAQF,SACrBF,cAACqE,IAAM,CAAC9D,KAAK,WAAW+D,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OAG9D1C,IAAcF,GACbzB,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAAA,MAAII,UAAU,iBAAgBF,SAAC,mBAC/BF,cAAA,OAAKI,UAAU,aAAYF,SACxBkC,EAAiBH,QAAQ0B,KAAI,SAAAc,GAAS,OACrCzE,cAACiB,EAAS,CAAoBE,KAAMsD,GAApBA,EAAUrD,GAAuB,MAGrDjB,eAAA,OAAKC,UAAU,wBAAuBF,SAAA,CACpCF,cAAA,UAAQI,UAAU,UAAUS,QAvBd,WAClB2B,EAAO,GACTC,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EAmBgE9C,KAAK,SAAQL,SAAC,SAGpEC,eAAA,KAAGC,UAAU,eAAcF,SAAA,CAAC,IAAEsC,EAAK,OACnCxC,cAAA,UAAQI,UAAU,UAAUS,QAjCd,WAClB2B,EAAOJ,EAAiBF,YAC1BO,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EA6BgE9C,KAAK,SAAQL,SAAC,iBAQhF,EC7EM0B,EACK,UADLA,EAEK,UA4EI8C,EAzEE,WACf,IAAAlF,EAAkCC,mBAASmC,GAA2BlC,EAAAC,YAAAH,EAAA,GAA/DsC,EAASpC,EAAA,GAAEqC,EAAYrC,EAAA,GAC9BsC,EAAkDvC,mBAAS,CACzDwC,QAAS,GACTC,WAAY,IACZC,EAAAxC,YAAAqC,EAAA,GAHK2C,EAAiBxC,EAAA,GAAEyC,EAAoBzC,EAAA,GAI9CG,EAAwB7C,mBAAS,GAAE8C,EAAA5C,YAAA2C,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,qBAAU,WACR,IAAMmC,EAAoB,eAAAjC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAA8B,EAAA5B,EAAA/B,EAAAc,EAAAC,EAAA,OAAAY,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE8E,MAD1F,mCACTwB,EAAM,wDAAA9D,OADG,mCAC8D,yBAAAA,OAAwBwB,GAAIY,EAAAE,KAAA,EAClFC,MAAMuB,GAAO,OAAtB,OAAR5B,EAAQE,EAAAI,KAAAJ,EAAAE,KAAA,EACKJ,EAASO,OAAM,OAA5BtC,EAAIiC,EAAAI,KACNN,EAASQ,KACLzB,EAAUd,EAAKc,QAAQ0B,KAAI,SAAAC,GAAI,MAAK,CACxCxC,GAAIwC,EAAKxC,GACTC,MAAOuC,EAAKvC,MACZC,WAAYsC,EAAKC,YACjBC,aAAcF,EAAKG,cACnBxC,OAAQqC,EAAKI,aACd,IACK9B,EAAaf,EAAK8C,YACxBW,EAAqB,CAAC3C,UAASC,eAC/BH,EAAaH,IACd,wBAAAwB,EAAAc,OAAA,GAAAlB,EAAA,KACF,kBAjByB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAmB1BS,GACF,GAAG,CAACrC,IAcJ,OACErC,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAACT,EAAM,IACNuC,IAAcF,GACb5B,cAAA,OAAKI,UAAU,SAAQF,SACrBF,cAACqE,IAAM,CAAC9D,KAAK,WAAW+D,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OAG9D1C,IAAcF,GACbzB,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAAA,MAAII,UAAU,iBAAgBF,SAAC,qBAC/BF,cAAA,OAAKI,UAAU,aAAYF,SACxByE,EAAkB1C,QAAQ0B,KAAI,SAAAc,GAAS,OACtCzE,cAACiB,EAAS,CAAoBE,KAAMsD,GAApBA,EAAUrD,GAAuB,MAGrDjB,eAAA,OAAKC,UAAU,wBAAuBF,SAAA,CACpCF,cAAA,UAAQI,UAAU,UAAUS,QAvBd,WAClB2B,EAAO,GACTC,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EAmBgE9C,KAAK,SAAQL,SAAC,SAGpEC,eAAA,KAAGC,UAAU,eAAcF,SAAA,CAAC,IAAEsC,EAAK,OACnCxC,cAAA,UAAQI,UAAU,UAAUS,QAjCd,WAClB2B,EAAOmC,EAAkBzC,YAC3BO,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EA6BgE9C,KAAK,SAAQL,SAAC,iBAQhF,EC7EM0B,EACK,UADLA,EAEK,UA6EImD,EA1EE,WACf,IAAAvF,EAAkCC,mBAASmC,GAA2BlC,EAAAC,YAAAH,EAAA,GAA/DsC,EAASpC,EAAA,GAAEqC,EAAYrC,EAAA,GAC9BsC,EAAkDvC,mBAAS,CACzDwC,QAAS,GACTC,WAAY,IACZC,EAAAxC,YAAAqC,EAAA,GAHKgD,EAAiB7C,EAAA,GAAE8C,EAAoB9C,EAAA,GAI9CG,EAAwB7C,mBAAS,GAAE8C,EAAA5C,YAAA2C,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,qBAAU,WACR,IAAMwC,EAAoB,eAAAtC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAA8B,EAAA5B,EAAA/B,EAAAc,EAAAC,EAAA,OAAAY,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE6E,MADzF,mCACTwB,EAAM,uDAAA9D,OADG,mCAC6D,yBAAAA,OAAwBwB,GAAIY,EAAAE,KAAA,EACjFC,MAAMuB,GAAO,OAAtB,OAAR5B,EAAQE,EAAAI,KAAAJ,EAAAE,KAAA,EACKJ,EAASO,OAAM,OAA5BtC,EAAIiC,EAAAI,KACNN,EAASQ,KACLzB,EAAUd,EAAKc,QAAQ0B,KAAI,SAAAC,GAAI,MAAK,CACxCxC,GAAIwC,EAAKxC,GACTC,MAAOuC,EAAKvC,MACZC,WAAYsC,EAAKC,YACjBC,aAAcF,EAAKG,cACnBxC,OAAQqC,EAAKI,aACd,IACK9B,EAAaf,EAAK8C,YACxBgB,EAAqB,CAAChD,UAASC,eAC/BH,EAAaH,IACd,wBAAAwB,EAAAc,OAAA,GAAAlB,EAAA,KACF,kBAjByB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAmB1Bc,GACF,GAAG,CAAC1C,IAcJ,OACErC,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAACT,EAAM,IACNuC,IAAcF,GACb5B,cAAA,OAAKI,UAAU,SAAQF,SACrBF,cAACqE,IAAM,CAAC9D,KAAK,WAAW+D,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OAG9D1C,IAAcF,GACbzB,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAAA,MAAII,UAAU,iBAAgBF,SAAC,oBAC/BF,cAAA,OAAKI,UAAU,aAAYF,SACxB8E,EAAkB/C,QAAQ0B,KAAI,SAAAc,GAAS,OACtCzE,cAACiB,EAAS,CAAoBE,KAAMsD,GAApBA,EAAUrD,GAAuB,MAGrDjB,eAAA,OAAKC,UAAU,wBAAuBF,SAAA,CACpCF,cAAA,UAAQI,UAAU,UAAUS,QAvBd,WAClB2B,EAAO,GACTC,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EAmBgE9C,KAAK,SAAQL,SAAC,SAGpEC,eAAA,KAAGC,UAAU,eAAcF,SAAA,CAAC,IAAEsC,EAAK,OACnCxC,cAAA,UAAQI,UAAU,UAAUS,QAjCd,WAClB2B,EAAOwC,EAAkB9C,YAC3BO,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EA6BgE9C,KAAK,SAAQL,SAAC,iBAQhF,EC7EM0B,EACK,UADLA,EAEK,UA+EIuD,EA5EO,SAAAjE,GACpB,IAEOtB,EAFSsB,EAATkE,MACAC,OACAzF,YACPJ,EAAkCC,mBAASmC,GAA2BlC,EAAAC,YAAAH,EAAA,GAA/DsC,EAASpC,EAAA,GAAEqC,EAAYrC,EAAA,GAC9BsC,EAAkDvC,mBAAS,CACzDwC,QAAS,GACTC,WAAY,IACZC,EAAAxC,YAAAqC,EAAA,GAHKsD,EAAiBnD,EAAA,GAAEoD,EAAoBpD,EAAA,GAI9CG,EAAwB7C,mBAAS,GAAE8C,EAAA5C,YAAA2C,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,qBAAU,WACR,IAAM8C,EAAoB,eAAA5C,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAA8B,EAAA5B,EAAA/B,EAAAc,EAAAC,EAAA,OAAAY,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEmF,MAD/F,mCACTwB,EAAM,qDAAA9D,OADG,mCAC2D,0BAAAA,OAAyBpB,EAAW,WAAAwD,EAAAE,KAAA,EACvFC,MAAMuB,GAAO,OAAtB,OAAR5B,EAAQE,EAAAI,KAAAJ,EAAAE,KAAA,EACKJ,EAASO,OAAM,OAA5BtC,EAAIiC,EAAAI,KACNN,EAASQ,KACLzB,EAAUd,EAAKc,QAAQ0B,KAAI,SAAAC,GAAI,MAAK,CACxCxC,GAAIwC,EAAKxC,GACTC,MAAOuC,EAAKvC,MACZC,WAAYsC,EAAKC,YACjBC,aAAcF,EAAKG,cACnBxC,OAAQqC,EAAKI,aACd,IACK9B,EAAaf,EAAK8C,YACxBsB,EAAqB,CAACtD,UAASC,eAC/BH,EAAaH,IACd,wBAAAwB,EAAAc,OAAA,GAAAlB,EAAA,KACF,kBAjByB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAmB1BoB,GACF,GAAG,CAAChD,EAAM5C,IAcV,OACEO,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAACT,EAAM,IACNuC,IAAcF,GACb5B,cAAA,OAAKI,UAAU,SAAQF,SACrBF,cAACqE,IAAM,CAAC9D,KAAK,WAAW+D,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OAG9D1C,IAAcF,GACbzB,eAAAF,WAAA,CAAAC,SAAA,CACEC,eAAA,MAAIC,UAAU,iBAAgBF,SAAA,CAAC,sBAAoBN,KACnDI,cAAA,OAAKI,UAAU,aAAYF,SACxBoF,EAAkBrD,QAAQ0B,KAAI,SAAAc,GAAS,OACtCzE,cAACiB,EAAS,CAAoBE,KAAMsD,GAApBA,EAAUrD,GAAuB,MAGrDjB,eAAA,OAAKC,UAAU,wBAAuBF,SAAA,CACpCF,cAAA,UAAQI,UAAU,UAAUS,QAvBd,WAClB2B,EAAO,GACTC,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EAmBgE9C,KAAK,SAAQL,SAAC,SAGpEC,eAAA,KAAGC,UAAU,eAAcF,SAAA,CAAC,IAAEsC,EAAK,OACnCxC,cAAA,UAAQI,UAAU,UAAUS,QAjCd,WAClB2B,EAAO8C,EAAkBpD,YAC3BO,GAAQ,SAAAY,GAAI,OAAIA,EAAO,CAAC,GAE5B,EA6BgE9C,KAAK,SAAQL,SAAC,iBAQhF,ECtEeuF,G,MAjBE,SAAAvE,GACf,IAAOC,EAAQD,EAARC,KACAuE,EAAoCvE,EAApCuE,KAAMC,EAA8BxE,EAA9BwE,YAAaC,EAAiBzE,EAAjByE,cAEpBpE,EAAQ,kCAAAR,OAAqC2E,GAEnD,OACExF,eAAA,OAAKC,UAAU,YAAWF,SAAA,CACxBF,cAAA,OAAKyB,IAAKD,EAAUE,IAAKgE,EAAMtF,UAAU,cACzCD,eAAA,OAAKC,UAAU,gBAAeF,SAAA,CAC5BF,cAAA,MAAII,UAAU,aAAYF,SAAEwF,IAC5B1F,cAAA,KAAGI,UAAU,YAAWF,SAAE0F,SAIlC,GCRMhE,G,MACK,WADLA,EAEK,UAsIIiE,EAnIM,SAAA3E,GACnB,IAEOE,EAFSF,EAATkE,MACAC,OACAjE,GACP5B,EAAkCC,mBAASmC,GAA2BlC,EAAAC,YAAAH,EAAA,GAA/DsC,EAASpC,EAAA,GAAEqC,EAAYrC,EAAA,GAC9BsC,EAAkCvC,mBAAS,CAAC,GAAE0C,EAAAxC,YAAAqC,EAAA,GAAvC8D,EAAS3D,EAAA,GAAE4D,EAAY5D,EAAA,GAC9BG,EAAsC7C,mBAAS,IAAG8C,EAAA5C,YAAA2C,EAAA,GAA3C0D,EAAWzD,EAAA,GAAE0D,EAAc1D,EAAA,GAElCG,qBAAU,WACR,IAAMwD,EAAY,eAAAtD,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAA8B,EAAA5B,EAAA/B,EAAAc,EAAA,OAAAa,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEsD,MAD1D,mCACTwB,EAAM,sCAAA9D,OAAyCI,EAAE,aAAAJ,OADxC,mCAC0D,mBAAAoC,EAAAE,KAAA,EAClDC,MAAMuB,GAAO,OAAtB,OAAR5B,EAAQE,EAAAI,KAAAJ,EAAAE,KAAA,EACKJ,EAASO,OAAM,OAA5BtC,EAAIiC,EAAAI,KACNN,EAASQ,KACLzB,EAAU,CACdZ,MAAOF,EAAKE,MACZC,WAAYH,EAAK0C,YACjBC,aAAc3C,EAAK4C,cACnBoC,SAAUhF,EAAKiF,QACfC,OAAQlF,EAAKkF,OAAO1C,KAAI,SAAAC,GAAI,OAAIA,EAAK8B,IAAI,IACzCnE,OAAQJ,EAAK6C,aACbsC,YAAanF,EAAKoF,aAClBC,SAAUrF,EAAKqF,UAEjBT,EAAa9D,GACbF,EAAaH,IACd,wBAAAwB,EAAAc,OAAA,GAAAlB,EAAA,KACF,kBAnBiB,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAqBZqC,EAAgB,eAAAC,EAAA7D,YAAAC,cAAAC,MAAG,SAAA4D,IAAA,IAAA7B,EAAA5B,EAAA/B,EAAAc,EAAA,OAAAa,cAAAK,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,OAE0D,MADlE,mCACTwB,EAAM,sCAAA9D,OAAyCI,EAAE,qBAAAJ,OADxC,mCACkE,mBAAA4F,EAAAtD,KAAA,EAC1DC,MAAMuB,GAAO,OAAtB,OAAR5B,EAAQ0D,EAAApD,KAAAoD,EAAAtD,KAAA,EACKJ,EAASO,OAAM,OAA5BtC,EAAIyF,EAAApD,KACNN,EAASQ,KACLzB,EAAUd,EAAK0F,KAAKlD,KAAI,SAAAC,GAAI,MAAK,CACrCxC,GAAIwC,EAAKxC,GACTsE,KAAM9B,EAAK8B,KACXrE,MAAOuC,EAAKvC,MACZsE,YAAa/B,EAAKkD,aAClBlB,cAAehC,EAAKmD,UACrB,IACDd,EAAehE,IAChB,wBAAA2E,EAAA1C,OAAA,GAAAyC,EAAA,KACF,kBAfqB,OAAAD,EAAAvC,MAAA,KAAAC,UAAA,KAiBtB8B,IACAO,GACF,GAAG,CAACrF,IAEJ,IAAM4F,EAAoBC,OACxB,IAAIC,KAAKpB,EAAUQ,aAAaa,eAG5BC,EAAwB,IAAIF,KAAKpB,EAAUQ,aAAae,WAAa,EACrEC,EACJF,EAAwB,GACpBH,OAAO,GAAKG,EACZH,OAAOG,GAEPG,EAAuB,IAAIL,KAAKpB,EAAUQ,aAAakB,UACvDC,EACJF,EAAuB,GACnBN,OAAO,GAAKM,EACZN,OAAOM,GAEPG,OACiBC,IAArB7B,EAAUO,QAAwBP,EAAUO,OAAOuB,KAAK,MAEpDC,OACiBF,IAArB7B,EAAUvE,QAAwBuE,EAAUvE,OAAOI,QAAQ,GAEvDH,EAAQ,kCAAAR,OAAqC8E,EAAUxE,YAE7D,OACEnB,eAAAF,WAAA,CAAAC,SAAA,CACEF,cAACT,EAAM,IACNuC,IAAcF,GACb5B,cAAA,OAAKI,UAAU,SAAQF,SACrBF,cAACqE,IAAM,CAAC9D,KAAK,WAAW+D,MAAM,UAAUC,OAAQ,GAAIC,MAAO,OAG9D1C,IAAcF,GACb5B,cAAAC,WAAA,CAAAC,SACEC,eAAA,OAAKC,UAAU,oBAAmBF,SAAA,CAChCC,eAAA,OAAKC,UAAU,wBAAuBF,SAAA,CACpCF,cAAA,OACEyB,IAAKD,EACLE,IAAKoE,EAAUJ,KACftF,UAAU,iBAEZD,eAAA,OAAKC,UAAU,aAAYF,SAAA,CACzBC,eAAA,MAAIC,UAAU,cAAaF,SAAA,CACxB4F,EAAUzE,MAAO,IAClBlB,eAAA,QAAMC,UAAU,eAAcF,SAAA,CAAC,IAAE8G,EAAkB,UAErD7G,eAAA,KAAGC,UAAU,eAAcF,SAAA,CAAC,UAAG2H,KAE/B1H,eAAA,KAAGC,UAAU,aAAYF,SAAA,CACvBF,cAAA,QAAMI,UAAU,gBAAeF,SAAC,aAC/BwH,KAEHvH,eAAA,KAAGC,UAAU,aAAYF,SAAA,CACvBF,cAAA,QAAMI,UAAU,gBAAeF,SAAC,mBAC/BuH,EAAkB,IAAEH,EAAmB,IAAEN,KAE5C7G,eAAA,KAAGC,UAAU,aAAYF,SAAA,CACvBF,cAAA,QAAMI,UAAU,gBAAeF,SAAC,eAAkB,IACjD4H,KAAKC,MAAMjC,EAAUK,SAAW,IAAI,IAAE,IACtC6B,SAASlC,EAAUK,UAAY,GAAG,OAErChG,eAAA,KAAGC,UAAU,aAAYF,SAAA,CACvBF,cAAA,QAAMI,UAAU,gBAAeF,SAAC,eAChCF,cAAA,SACC8F,EAAUU,kBAIjBxG,cAAA,MAAII,UAAU,eAAcF,SAAC,WAC7BF,cAAA,OAAKI,UAAU,YAAWF,SACvB8F,EAAYrC,KAAI,SAAAC,GAAI,OACnB5D,cAACyF,EAAQ,CAAetE,KAAMyC,GAAfA,EAAKxC,GAAkB,aAQtD,EC5He6G,G,MAVH,WAAH,OACP9H,eAAC+H,IAAM,CAAAhI,SAAA,CACLF,cAACmI,IAAK,CAACC,OAAK,EAACC,KAAK,IAAIC,UAAWzG,IACjC7B,cAACmI,IAAK,CAACC,OAAK,EAACC,KAAK,aAAaC,UAAW5D,IAC1C1E,cAACmI,IAAK,CAACC,OAAK,EAACC,KAAK,YAAYC,UAAWvD,IACzC/E,cAACmI,IAAK,CAACC,OAAK,EAACC,KAAK,uBAAuBC,UAAWnD,IACpDnF,cAACmI,IAAK,CAACC,OAAK,EAACC,KAAK,aAAaC,UAAWzC,MACnC,GCXX0C,IAASC,OACPxI,cAACyI,IAAMC,WAAU,CAAAxI,SACfF,cAAC2I,IAAa,CAAAzI,SACZF,cAACiI,EAAG,QAGRW,SAASC,eAAe,Q","file":"static/js/main.02b9ba82.chunk.js","sourcesContent":["import {useState} from 'react'\nimport {Link, useHistory} from 'react-router-dom'\n\nimport './index.css'\n\nconst Header = () => {\n  const [searchInput, setSearchInput] = useState('')\n  const history = useHistory()\n\n  const onChangeSearchInput = e => {\n    setSearchInput(e.target.value)\n  }\n\n  const onSearchUserInput = () => {\n    if (searchInput.trim() !== '') {\n      history.push(`/search/${searchInput}`)\n      setSearchInput('')\n    }\n  }\n\n  return (\n    <>\n      <div className='nav-bar'>\n        <Link to='/' className='nav-links'>\n          <h1 className='title'>movieDB</h1>\n        </Link>\n        <ul className='nav-items'>\n          <li>\n            <Link to='/' className='nav-links'>\n              <h2 className='nav-buttons'>Popular</h2>\n            </Link>\n          </li>\n          <li>\n            <Link to='/top-rated' className='nav-links'>\n              <h2 className='nav-buttons'>Top Rated</h2>\n            </Link>\n          </li>\n          <li>\n            <Link to='/upcoming' className='nav-links'>\n              <h2 className='nav-buttons'>Upcoming</h2>\n            </Link>\n          </li>\n        </ul>\n        <div className='search-container'>\n          <input\n            type='search'\n            className='search-box'\n            placeholder='Search'\n            value={searchInput}\n            onChange={onChangeSearchInput}\n          />\n          <button\n            type='button'\n            onClick={onSearchUserInput}\n            className='search-btn'\n          >\n            Search\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Header\n","import {Link} from 'react-router-dom'\n\nimport './index.css'\n\nconst MovieItem = props => {\n  const {data} = props\n  const {id, title, posterPath, rating} = data\n\n  const imageUrl = `https://image.tmdb.org/t/p/w500${posterPath}`\n\n  return (\n    <div className=\"movie-item\">\n      <img src={imageUrl} alt={title} className=\"poster\" />\n      <div className=\"details\">\n        <h2 className=\"movie-name\">{title}</h2>\n        <div className=\"movie-item-section-1\">\n          <p className=\"rating\">⭐ {rating.toFixed(1)}</p>\n          <Link to={`/movie/${id}`}>\n            <button className=\"view-btn\" type=\"button\">\n              View details\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default MovieItem\n","import {useState, useEffect} from 'react'\n\nimport Loader from 'react-loader-spinner'\n\nimport Header from '../Header'\nimport MovieItem from '../MovieItem'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n}\n\nconst Popular = () => {\n  const [apiStatus, setApiStatus] = useState(apiStatusConstants.initial)\n  const [popularMovieData, setPopularMovieData] = useState({\n    results: [],\n    totalPages: 0,\n  })\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    const getPopularMovieData = async () => {\n      const apiKey = '32ebf2a57379d3ebe7dd7baf7a315ffd'\n      const getPopularMoviesURL = `https://api.themoviedb.org/3/movie/popular?api_key=${apiKey}&language=en-US&page=${page}`\n      const response = await fetch(getPopularMoviesURL)\n      const data = await response.json()\n      if (response.ok) {\n        const results = data.results.map(each => ({\n          id: each.id,\n          title: each.title,\n          posterPath: each.poster_path,\n          backdropPath: each.backdrop_path,\n          rating: each.vote_average,\n        }))\n        const totalPages = data.total_pages\n        setPopularMovieData({results, totalPages})\n        setApiStatus(apiStatusConstants.success)\n      }\n    }\n\n    getPopularMovieData()\n  }, [page])\n\n  const onPageIncrement = () => {\n    if (page < popularMovieData.totalPages) {\n      setPage(prev => prev + 1)\n    }\n  }\n\n  const onPageDecrement = () => {\n    if (page > 1) {\n      setPage(prev => prev - 1)\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {apiStatus === apiStatusConstants.initial && (\n        <div className=\"loader\">\n          <Loader type=\"TailSpin\" color=\"#00bfff\" height={50} width={50} />\n        </div>\n      )}\n      {apiStatus === apiStatusConstants.success && (\n        <>\n          <h3 className=\"search-heading\">Popular Movies</h3>\n          <div className=\"movie-list\">\n            {popularMovieData.results.map(eachMovie => (\n              <MovieItem key={eachMovie.id} data={eachMovie} />\n            ))}\n          </div>\n          <div className=\"pagintation-container\">\n            <button className=\"prv-btn\" onClick={onPageDecrement} type=\"button\">\n              Prev\n            </button>\n            <p className=\"page-details\"> {page} </p>\n            <button className=\"nxt-btn\" onClick={onPageIncrement} type=\"button\">\n              Next\n            </button>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\nexport default Popular\n","import {useState, useEffect} from 'react'\n\nimport Loader from 'react-loader-spinner'\n\nimport Header from '../Header'\nimport MovieItem from '../MovieItem'\n\nimport '../Popular/index.css'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n}\n\nconst TopRated = () => {\n  const [apiStatus, setApiStatus] = useState(apiStatusConstants.initial)\n  const [topRatedMovieData, setTopRatedMovieData] = useState({\n    results: [],\n    totalPages: 0,\n  })\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    const getTopRatedMovieData = async () => {\n      const apiKey = '32ebf2a57379d3ebe7dd7baf7a315ffd'\n      const apiUrl = `https://api.themoviedb.org/3/movie/top_rated?api_key=${apiKey}&language=en-US&page=${page}`\n      const response = await fetch(apiUrl)\n      const data = await response.json()\n      if (response.ok) {\n        const results = data.results.map(each => ({\n          id: each.id,\n          title: each.title,\n          posterPath: each.poster_path,\n          backdropPath: each.backdrop_path,\n          rating: each.vote_average,\n        }))\n        const totalPages = data.total_pages\n        setTopRatedMovieData({results, totalPages})\n        setApiStatus(apiStatusConstants.success)\n      }\n    }\n\n    getTopRatedMovieData()\n  }, [page])\n\n  const onPageIncrement = () => {\n    if (page < topRatedMovieData.totalPages) {\n      setPage(prev => prev + 1)\n    }\n  }\n\n  const onPageDecrement = () => {\n    if (page > 1) {\n      setPage(prev => prev - 1)\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {apiStatus === apiStatusConstants.initial && (\n        <div className=\"loader\">\n          <Loader type=\"TailSpin\" color=\"#00bfff\" height={50} width={50} />\n        </div>\n      )}\n      {apiStatus === apiStatusConstants.success && (\n        <>\n          <h3 className=\"search-heading\">Top-Rated Movies</h3>\n          <div className=\"movie-list\">\n            {topRatedMovieData.results.map(eachMovie => (\n              <MovieItem key={eachMovie.id} data={eachMovie} />\n            ))}\n          </div>\n          <div className=\"pagintation-container\">\n            <button className=\"prv-btn\" onClick={onPageDecrement} type=\"button\">\n              Prev\n            </button>\n            <p className=\"page-details\"> {page} </p>\n            <button className=\"nxt-btn\" onClick={onPageIncrement} type=\"button\">\n              Next\n            </button>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\nexport default TopRated\n","import {useState, useEffect} from 'react'\n\nimport Loader from 'react-loader-spinner'\n\nimport Header from '../Header'\nimport MovieItem from '../MovieItem'\n\nimport '../Popular/index.css'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n}\n\nconst Upcoming = () => {\n  const [apiStatus, setApiStatus] = useState(apiStatusConstants.initial)\n  const [upcomingMovieData, setUpcomingMovieData] = useState({\n    results: [],\n    totalPages: 0,\n  })\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    const getUpcomingMovieData = async () => {\n      const apiKey = '32ebf2a57379d3ebe7dd7baf7a315ffd'\n      const apiUrl = `https://api.themoviedb.org/3/movie/upcoming?api_key=${apiKey}&language=en-US&page=${page}`\n      const response = await fetch(apiUrl)\n      const data = await response.json()\n      if (response.ok) {\n        const results = data.results.map(each => ({\n          id: each.id,\n          title: each.title,\n          posterPath: each.poster_path,\n          backdropPath: each.backdrop_path,\n          rating: each.vote_average,\n        }))\n        const totalPages = data.total_pages\n        setUpcomingMovieData({results, totalPages})\n        setApiStatus(apiStatusConstants.success)\n      }\n    }\n\n    getUpcomingMovieData()\n  }, [page])\n\n  const onPageIncrement = () => {\n    if (page < upcomingMovieData.totalPages) {\n      setPage(prev => prev + 1)\n    }\n  }\n\n  const onPageDecrement = () => {\n    if (page > 1) {\n      setPage(prev => prev - 1)\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {apiStatus === apiStatusConstants.initial && (\n        <div className='loader'>\n          <Loader type='TailSpin' color='#00bfff' height={50} width={50} />\n        </div>\n      )}\n      {apiStatus === apiStatusConstants.success && (\n        <>\n          <h3 className='search-heading'>Upcoming Movies</h3>\n          <div className='movie-list'>\n            {upcomingMovieData.results.map(eachMovie => (\n              <MovieItem key={eachMovie.id} data={eachMovie} />\n            ))}\n          </div>\n          <div className='pagintation-container'>\n            <button className='prv-btn' onClick={onPageDecrement} type='button'>\n              Prev\n            </button>\n            <p className='page-details'> {page} </p>\n            <button className='nxt-btn' onClick={onPageIncrement} type='button'>\n              Next\n            </button>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Upcoming\n","import {useState, useEffect} from 'react'\n\nimport Loader from 'react-loader-spinner'\n\nimport Header from '../Header'\nimport MovieItem from '../MovieItem'\n\nimport '../Popular/index.css'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n}\n\nconst SearchResults = props => {\n  const {match} = props\n  const {params} = match\n  const {searchInput} = params\n  const [apiStatus, setApiStatus] = useState(apiStatusConstants.initial)\n  const [searchedMovieData, setSearchedMovieData] = useState({\n    results: [],\n    totalPages: 0,\n  })\n  const [page, setPage] = useState(1)\n\n  useEffect(() => {\n    const getSearchedMovieData = async () => {\n      const apiKey = '32ebf2a57379d3ebe7dd7baf7a315ffd'\n      const apiUrl = `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${searchInput}&page=1`\n      const response = await fetch(apiUrl)\n      const data = await response.json()\n      if (response.ok) {\n        const results = data.results.map(each => ({\n          id: each.id,\n          title: each.title,\n          posterPath: each.poster_path,\n          backdropPath: each.backdrop_path,\n          rating: each.vote_average,\n        }))\n        const totalPages = data.total_pages\n        setSearchedMovieData({results, totalPages})\n        setApiStatus(apiStatusConstants.success)\n      }\n    }\n\n    getSearchedMovieData()\n  }, [page, searchInput])\n\n  const onPageIncrement = () => {\n    if (page < searchedMovieData.totalPages) {\n      setPage(prev => prev + 1)\n    }\n  }\n\n  const onPageDecrement = () => {\n    if (page > 1) {\n      setPage(prev => prev - 1)\n    }\n  }\n\n  return (\n    <>\n      <Header />\n      {apiStatus === apiStatusConstants.initial && (\n        <div className=\"loader\">\n          <Loader type=\"TailSpin\" color=\"#00bfff\" height={50} width={50} />\n        </div>\n      )}\n      {apiStatus === apiStatusConstants.success && (\n        <>\n          <h3 className=\"search-heading\">Search Results for {searchInput}</h3>\n          <div className=\"movie-list\">\n            {searchedMovieData.results.map(eachMovie => (\n              <MovieItem key={eachMovie.id} data={eachMovie} />\n            ))}\n          </div>\n          <div className=\"pagintation-container\">\n            <button className=\"prv-btn\" onClick={onPageDecrement} type=\"button\">\n              Prev\n            </button>\n            <p className=\"page-details\"> {page} </p>\n            <button className=\"nxt-btn\" onClick={onPageIncrement} type=\"button\">\n              Next\n            </button>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\nexport default SearchResults\n","import './index.css'\n\nconst CastItem = props => {\n  const {data} = props\n  const {name, profilePath, characterName} = data\n\n  const imageUrl = `https://image.tmdb.org/t/p/w500${profilePath}`\n\n  return (\n    <div className=\"cast-item\">\n      <img src={imageUrl} alt={name} className=\"actor-img\" />\n      <div className=\"actor-details\">\n        <h2 className=\"actor-name\">{name}</h2>\n        <p className=\"char-name\">{characterName}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default CastItem\n","import {useState, useEffect} from 'react'\n\nimport Loader from 'react-loader-spinner'\n\nimport Header from '../Header'\nimport CastItem from '../CastItem'\n\nimport './index.css'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  success: 'SUCCESS',\n}\n\nconst MovieDetails = props => {\n  const {match} = props\n  const {params} = match\n  const {id} = params\n  const [apiStatus, setApiStatus] = useState(apiStatusConstants.initial)\n  const [movieData, setMovieData] = useState({})\n  const [castDetails, setCastDetails] = useState([])\n\n  useEffect(() => {\n    const getMovieData = async () => {\n      const apiKey = '32ebf2a57379d3ebe7dd7baf7a315ffd'\n      const apiUrl = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}&language=en-US`\n      const response = await fetch(apiUrl)\n      const data = await response.json()\n      if (response.ok) {\n        const results = {\n          title: data.title,\n          posterPath: data.poster_path,\n          backdropPath: data.backdrop_path,\n          duration: data.runtime,\n          genres: data.genres.map(each => each.name),\n          rating: data.vote_average,\n          releaseDate: data.release_date,\n          overview: data.overview,\n        }\n        setMovieData(results)\n        setApiStatus(apiStatusConstants.success)\n      }\n    }\n\n    const getMovieCastData = async () => {\n      const apiKey = '32ebf2a57379d3ebe7dd7baf7a315ffd'\n      const apiUrl = `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}&language=en-US`\n      const response = await fetch(apiUrl)\n      const data = await response.json()\n      if (response.ok) {\n        const results = data.cast.map(each => ({\n          id: each.id,\n          name: each.name,\n          title: each.title,\n          profilePath: each.profile_path,\n          characterName: each.character,\n        }))\n        setCastDetails(results)\n      }\n    }\n\n    getMovieData()\n    getMovieCastData()\n  }, [id])\n\n  const movieReleasedYear = String(\n    new Date(movieData.releaseDate).getFullYear(),\n  )\n\n  const getMovieReleasedMonth = new Date(movieData.releaseDate).getMonth() + 1\n  const movieReleasedMonth =\n    getMovieReleasedMonth < 10\n      ? String(0) + getMovieReleasedMonth\n      : String(getMovieReleasedMonth)\n\n  const getMovieReleasedDate = new Date(movieData.releaseDate).getDate()\n  const movieReleasedDate =\n    getMovieReleasedDate < 10\n      ? String(0) + getMovieReleasedDate\n      : String(getMovieReleasedDate)\n\n  const movieGenres =\n    movieData.genres !== undefined && movieData.genres.join(', ')\n\n  const movieRating =\n    movieData.rating !== undefined && movieData.rating.toFixed(1)\n\n  const imageUrl = `https://image.tmdb.org/t/p/w500${movieData.posterPath}`\n\n  return (\n    <>\n      <Header />\n      {apiStatus === apiStatusConstants.initial && (\n        <div className=\"loader\">\n          <Loader type=\"TailSpin\" color=\"#00bfff\" height={50} width={50} />\n        </div>\n      )}\n      {apiStatus === apiStatusConstants.success && (\n        <>\n          <div className=\"movie-details-app\">\n            <div className=\"movie-details-section\">\n              <img\n                src={imageUrl}\n                alt={movieData.name}\n                className=\"movie-poster\"\n              />\n              <div className=\"movie-data\">\n                <h1 className=\"movie-title\">\n                  {movieData.title}{' '}\n                  <span className=\"release-year\">({movieReleasedYear})</span>\n                </h1>\n                <p className=\"movie-rating\">⭐ {movieRating}</p>\n\n                <p className=\"movie-text\">\n                  <span className=\"movie-heading\">Genres: </span>\n                  {movieGenres}\n                </p>\n                <p className=\"movie-text\">\n                  <span className=\"movie-heading\">Release Date: </span>\n                  {movieReleasedDate}/{movieReleasedMonth}/{movieReleasedYear}\n                </p>\n                <p className=\"movie-text\">\n                  <span className=\"movie-heading\">Duration: </span>{' '}\n                  {Math.floor(movieData.duration / 60)}h{' '}\n                  {parseInt(movieData.duration) % 60}m\n                </p>\n                <p className=\"movie-text\">\n                  <span className=\"movie-heading\">Overview: </span>\n                  <br />\n                  {movieData.overview}\n                </p>\n              </div>\n            </div>\n            <h4 className=\"cast-heading\">Cast :</h4>\n            <div className=\"cast-list\">\n              {castDetails.map(each => (\n                <CastItem key={each.id} data={each} />\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  )\n}\nexport default MovieDetails\n","import {Switch, Route} from 'react-router-dom'\n\nimport Popular from './components/Popular'\nimport TopRated from './components/TopRated'\nimport Upcoming from './components/Upcoming'\nimport SearchResults from './components/SearchResults'\nimport MovieDetails from './components/MovieDetails'\n\nimport './App.css'\n\nconst App = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Popular} />\n    <Route exact path=\"/top-rated\" component={TopRated} />\n    <Route exact path=\"/upcoming\" component={Upcoming} />\n    <Route exact path=\"/search/:searchInput\" component={SearchResults} />\n    <Route exact path=\"/movie/:id\" component={MovieDetails} />\n  </Switch>\n)\n\nexport default App\n","import {BrowserRouter} from 'react-router-dom'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}